generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile management
model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique
  email         String   @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  phone         String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  dateOfBirth   DateTime?
  referralCode  String   @unique @default(cuid())
  referredBy    String?
  loyaltyPoints Int      @default(0)
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orders        Order[]
  reviews       Review[]
  wishlist      WishlistItem[]
  cartItems     CartItem[]
  comments      Comment[]
  likes         ProductLike[]
  referrals     User[]   @relation("UserReferrals")
  referrer      User?    @relation("UserReferrals", fields: [referredBy], references: [id])
  notifications Notification[]
  sessions      UserSession[]
  socialShares  SocialShare[]
  downloads     Download[]

  @@map("users")
}

// User session tracking
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  ipAddress String?
  userAgent String?
  location  String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Categories for organizing products
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Artisan profiles
model Artisan {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  bio         String?
  image       String?
  phone       String?
  location    String?
  experience  Int? // years of experience
  specialties String[] // array of specialties
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("artisans")
}

// Product model for artifacts
model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String
  shortDescription String?
  sku             String   @unique
  price           Decimal  @db.Decimal(10, 2)
  compareAtPrice  Decimal? @db.Decimal(10, 2) // original price for discounts
  costPrice       Decimal? @db.Decimal(10, 2) // cost for admin use
  weight          Decimal? @db.Decimal(8, 2) // in kg
  dimensions      Json? // {length, width, height}
  materials       String[] // array of materials used
  colors          String[] // available colors
  isHandmade      Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  isActive        Boolean  @default(true)
  inStock         Boolean  @default(true)
  stockQuantity   Int      @default(1)
  minOrderQty     Int      @default(1)
  maxOrderQty     Int?
  tags            String[] // searchable tags
  metaTitle       String?
  metaDescription String?
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign keys
  categoryId String
  artisanId  String?

  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  artisan       Artisan?       @relation(fields: [artisanId], references: [id])
  images        ProductImage[]
  videos        ProductVideo[]
  reviews       Review[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  likes         ProductLike[]
  comments      Comment[]
  socialShares  SocialShare[]
  downloads     Download[]

  @@map("products")
}

// Product images
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  sortOrder Int      @default(0)
  is360View Boolean  @default(false)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  productId   String
  mediaFileId String?

  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  mediaFile MediaFile? @relation(fields: [mediaFileId], references: [id], onDelete: SetNull)

  @@map("product_images")
}

// Product videos
model ProductVideo {
  id          String   @id @default(cuid())
  url         String
  title       String?
  description String?
  duration    Int? // in seconds
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())

  productId   String
  mediaFileId String?

  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  mediaFile MediaFile? @relation(fields: [mediaFileId], references: [id], onDelete: SetNull)

  @@map("product_videos")
}

// Shopping cart
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Product likes
model ProductLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("product_likes")
}

// Orders
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  subtotalAmount  Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal     @default(0) @db.Decimal(10, 2)
  shippingAmount  Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal     @default(0) @db.Decimal(10, 2)
  currency        String      @default("USD")
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentIntentId String? // Stripe payment intent ID
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Shipping information
  shippingFirstName String
  shippingLastName  String
  shippingEmail     String
  shippingPhone     String?
  shippingAddress   String
  shippingCity      String
  shippingState     String?
  shippingPostalCode String
  shippingCountry   String
  
  // Billing information (optional, defaults to shipping)
  billingFirstName  String?
  billingLastName   String?
  billingEmail      String?
  billingPhone      String?
  billingAddress    String?
  billingCity       String?
  billingState      String?
  billingPostalCode String?
  billingCountry    String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Relations
  items     OrderItem[]
  tracking  OrderTracking[]
  refunds   Refund[]

  @@map("orders")
}

// Order items
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2) // price at time of order
  total    Decimal @db.Decimal(10, 2)

  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Order tracking
model OrderTracking {
  id          String   @id @default(cuid())
  status      String
  location    String?
  description String?
  timestamp   DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

// Refunds
model Refund {
  id            String      @id @default(cuid())
  amount        Decimal     @db.Decimal(10, 2)
  reason        String
  status        RefundStatus @default(PENDING)
  refundIntentId String? // Stripe refund ID
  processedAt   DateTime?
  createdAt     DateTime    @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("refunds")
}

// Product reviews
model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5 stars
  title     String?
  content   String
  isVerified Boolean @default(false) // verified purchase
  isActive  Boolean  @default(true)
  helpfulCount Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Comments on products
model Comment {
  id        String   @id @default(cuid())
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String
  parentId  String? // for replies

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

// Discount coupons
model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  type          CouponType @default(PERCENTAGE)
  value         Decimal    @db.Decimal(10, 2) // percentage or fixed amount
  minOrderAmount Decimal?  @db.Decimal(10, 2)
  maxDiscount   Decimal?   @db.Decimal(10, 2)
  usageLimit    Int?
  usageCount    Int        @default(0)
  isActive      Boolean    @default(true)
  validFrom     DateTime
  validUntil    DateTime
  createdAt     DateTime   @default(now())

  @@map("coupons")
}

// Email/SMS campaigns
model Campaign {
  id          String       @id @default(cuid())
  name        String
  type        CampaignType @default(EMAIL)
  subject     String?
  content     String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  openRate    Decimal?     @db.Decimal(5, 2)
  clickRate   Decimal?     @db.Decimal(5, 2)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("campaigns")
}

// User notifications
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(GENERAL)
  isRead    Boolean          @default(false)
  data      Json? // additional data
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Analytics tracking
model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String
  properties Json?
  userId     String?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@map("analytics_events")
}

// Blog posts for content marketing
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  featuredImage String?
  tags        String[]
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

// Social shares tracking
model SocialShare {
  id        String      @id @default(cuid())
  platform  SocialPlatform
  url       String
  title     String?
  content   String?
  imageUrl  String?
  createdAt DateTime    @default(now())

  userId    String?
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  productId String?
  product   Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("social_shares")
}

// Download tracking
model Download {
  id           String      @id @default(cuid())
  downloadType DownloadType
  fileName     String
  fileUrl      String
  fileSize     Int?
  createdAt    DateTime    @default(now())

  userId       String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  productId    String?
  product      Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("downloads")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CampaignType {
  EMAIL
  SMS
  PUSH
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
  CANCELLED
}

enum NotificationType {
  GENERAL
  ORDER_UPDATE
  PROMOTION
  SYSTEM
  REVIEW_REQUEST
}

enum SocialPlatform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  WHATSAPP
  LINKEDIN
  PINTEREST
  EMAIL
  COPY_LINK
}

enum DownloadType {
  PRODUCT_IMAGE
  PRODUCT_INFO
  CERTIFICATE
  USER_GUIDE
  ARTWORK_DETAILS
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AdminActivityType {
  PRODUCT_CREATE
  PRODUCT_UPDATE
  PRODUCT_DELETE
  MEDIA_UPLOAD
  MEDIA_DELETE
  USER_ACTION
  SYSTEM_CONFIG
}

// Admin users with enhanced permissions
model AdminUser {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  role         UserRole @default(ADMIN)
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  activities   AdminActivity[]

  @@map("admin_users")
}

// Admin activity logging
model AdminActivity {
  id          String            @id @default(cuid())
  type        AdminActivityType
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime          @default(now())

  adminUserId String
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@map("admin_activities")
}

// Media management
model MediaFile {
  id           String   @id @default(cuid())
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  width        Int?
  height       Int?
  duration     Int? // for videos
  alt          String?
  caption      String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  productImages ProductImage[]
  productVideos ProductVideo[]

  @@map("media_files")
}